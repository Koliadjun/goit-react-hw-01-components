{"version":3,"sources":["components/profile/Profile.jsx","components/statistics/Statistics.jsx","components/friendList/FriendListItem.jsx","components/friendList/FriendList.jsx","App.js","reportWebVitals.js","index.js"],"names":["Profile","name","tag","location","avatar","stats","className","src","alt","followers","views","likes","prototype","PropTypes","string","shape","number","StatisticalData","title","map","stat","label","percentage","id","array","FriendListItem","friend","isOnline","width","FriendList","friends","toString","App","user","Statistics","statisticalData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"62CACMA,EAAU,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC9C,OACE,sBAAKC,UAAU,UAAf,UACE,sBAAKA,UAAU,cAAf,UACE,qBAAKC,IAAKH,EAAQI,IAAI,8CAAgBF,UAAU,WAChD,mBAAGA,UAAU,OAAb,SAAqBL,IACrB,oBAAGK,UAAU,MAAb,cAAqBJ,KACrB,mBAAGI,UAAU,WAAb,SAAyBH,OAG3B,qBAAIG,UAAU,QAAd,UACE,+BACE,sBAAMA,UAAU,QAAhB,uBACA,sBAAMA,UAAU,WAAhB,SAA4BD,EAAMI,eAEpC,+BACE,sBAAMH,UAAU,QAAhB,mBACA,sBAAMA,UAAU,WAAhB,SAA4BD,EAAMK,WAEpC,+BACE,sBAAMJ,UAAU,QAAhB,mBACA,sBAAMA,UAAU,WAAhB,SAA4BD,EAAMM,kBAM5CX,EAAQY,UAAY,CAClBX,KAAMY,IAAUC,OAChBZ,IAAKW,IAAUC,OACfX,SAAUU,IAAUC,OACpBV,OAAQS,IAAUC,OAClBT,MAAOQ,IAAUE,MAAM,CACrBN,UAAWI,IAAUG,OACrBN,MAAOG,IAAUG,OACjBL,MAAOE,IAAUG,UAINhB,Q,OCvCTiB,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOb,EAAV,EAAUA,MAAV,OACtB,0BAASC,UAAU,aAAnB,UACGY,GAAS,oBAAIZ,UAAU,QAAd,SAAuBY,IACjC,oBAAIZ,UAAU,YAAd,SACGD,EAAMc,KAAI,SAAAC,GAAI,OACb,qBAAId,UAAU,OAAd,UACE,sBAAMA,UAAU,QAAhB,SAAyBc,EAAKC,QAC9B,sBAAMf,UAAU,aAAhB,SAA8Bc,EAAKE,eAFXF,EAAKG,aASvCN,EAAgBL,UAAY,CAC1BM,MAAOL,IAAUC,OACjBT,MAAOQ,IAAUW,OAEJP,Q,OCHAQ,EAhBQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACrB,qBAAIpB,UAAU,OAAd,UACGoB,EAAOC,SACN,sBAAMrB,UAAU,yBAEhB,sBAAMA,UAAU,0BAElB,qBACEA,UAAU,SACVC,IAAKmB,EAAOtB,OACZI,IAAI,uBACJoB,MAAM,OAER,mBAAGtB,UAAU,OAAb,SAAqBoB,EAAOzB,WCX1B4B,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACjB,oBAAIxB,UAAU,cAAd,SACGwB,EAAQX,KAAI,SAAAO,GAAM,OACjB,cAAC,EAAD,CAA2CA,OAAQA,GAA9BA,EAAOH,GAAGQ,kBAIrCF,EAAWjB,UAAY,CACrBkB,QAASjB,YAAUW,OAENK,Q,OCeAG,MAhBf,WACE,OACE,sBAAK1B,UAAU,MAAf,UACE,cAAC,EAAD,CACEL,KAAMgC,EAAKhC,KACXC,IAAK+B,EAAK/B,IACVC,SAAU8B,EAAK9B,SACfC,OAAQ6B,EAAK7B,OACbC,MAAO4B,EAAK5B,QAEd,cAAC6B,EAAD,CAAY7B,MAAO8B,IACnB,cAAC,EAAD,CAAYL,QAASA,IATvB,QCDWM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e8d2f7c3.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nconst Profile = ({ name, tag, location, avatar, stats }) => {\n  return (\n    <div className=\"profile\">\n      <div className=\"description\">\n        <img src={avatar} alt=\"Аватар {name}\" className=\"avatar\" />\n        <p className=\"name\">{name}</p>\n        <p className=\"tag\">@{tag}</p>\n        <p className=\"location\">{location}</p>\n      </div>\n\n      <ul className=\"stats\">\n        <li>\n          <span className=\"label\">followers</span>\n          <span className=\"quantity\">{stats.followers}</span>\n        </li>\n        <li>\n          <span className=\"label\">views</span>\n          <span className=\"quantity\">{stats.views}</span>\n        </li>\n        <li>\n          <span className=\"label\">likes</span>\n          <span className=\"quantity\">{stats.likes}</span>\n        </li>\n      </ul>\n    </div>\n  );\n};\nProfile.prototype = {\n  name: PropTypes.string,\n  tag: PropTypes.string,\n  location: PropTypes.string,\n  avatar: PropTypes.string,\n  stats: PropTypes.shape({\n    followers: PropTypes.number,\n    views: PropTypes.number,\n    likes: PropTypes.number,\n  }),\n};\n\nexport default Profile;\n","import PropTypes from 'prop-types';\nconst StatisticalData = ({ title, stats }) => (\n  <section className=\"statistics\">\n    {title && <h2 className=\"title\">{title}</h2>}\n    <ul className=\"stat-list\">\n      {stats.map(stat => (\n        <li className=\"item\" key={stat.id}>\n          <span className=\"label\">{stat.label}</span>\n          <span className=\"percentage\">{stat.percentage}</span>\n        </li>\n      ))}\n    </ul>\n  </section>\n);\n\nStatisticalData.prototype = {\n  title: PropTypes.string,\n  stats: PropTypes.array,\n};\nexport default StatisticalData;\n","const FriendListItem = ({ friend }) => (\n  <li className=\"item\">\n    {friend.isOnline ? (\n      <span className=\"status status-online\"></span>\n    ) : (\n      <span className=\"status status-offline\"></span>\n    )}\n    <img\n      className=\"avatar\"\n      src={friend.avatar}\n      alt=\"avatar {friend.name}\"\n      width=\"48\"\n    />\n    <p className=\"name\">{friend.name}</p>\n  </li>\n);\nexport default FriendListItem;\n","import { PropTypes } from 'prop-types';\nimport FriendListItem from './FriendListItem';\nconst FriendList = ({ friends }) => (\n  <ul className=\"friend-list\">\n    {friends.map(friend => (\n      <FriendListItem key={friend.id.toString()} friend={friend} />\n    ))}\n  </ul>\n);\nFriendList.prototype = {\n  friends: PropTypes.array,\n};\nexport default FriendList;\n","import './App.css';\n\nimport Profile from './components/profile/Profile';\nimport user from './components/profile/user.json';\n\nimport Statistics from './components/statistics/Statistics';\nimport statisticalData from './components/statistics/statistical-data.json';\n\nimport FriendList from './components/friendList/FriendList';\nimport friends from './components/friendList/friends.json';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Profile\n        name={user.name}\n        tag={user.tag}\n        location={user.location}\n        avatar={user.avatar}\n        stats={user.stats}\n      />\n      <Statistics stats={statisticalData} />\n      <FriendList friends={friends} />,\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}